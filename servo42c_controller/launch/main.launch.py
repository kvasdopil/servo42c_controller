#!/usr/bin/env python3

import os
from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument
from launch_ros.actions import Node
from launch.substitutions import LaunchConfiguration
from moveit_configs_utils import MoveItConfigsBuilder

def generate_launch_description():
    # Get the package directory
    pkg_dir = get_package_share_directory('servo42c_controller')
    package_name = 'servo42c_controller'

    # Define paths for general config files
    config_file = os.path.join(pkg_dir, 'config', 'servo_config.yaml') # For servo42c_controller node
    controllers_file = os.path.join(pkg_dir, 'config', 'controllers.yaml') # For controller_manager node

    # Define paths for MoveIt specific config files
    urdf_path = os.path.join(pkg_dir, "description", "arm.urdf")
    srdf_path = os.path.join(pkg_dir, "config", "servo42c_controller.srdf")
    kinematics_path = os.path.join(pkg_dir, "config", "kinematics.yaml")
    ompl_planning_path = os.path.join(pkg_dir, "config", "ompl_planning.yaml")
    joint_limits_path = os.path.join(pkg_dir, "config", "joint_limits.yaml")
    moveit_controllers_path = os.path.join(pkg_dir, "config", "moveit_controllers.yaml")

    # Use MoveItConfigsBuilder primarily to generate the robot_description parameter
    # Other parameters will be passed explicitly as file paths to move_group
    moveit_configs = (
        MoveItConfigsBuilder(package_name, package_name=package_name)
        .robot_description(file_path=urdf_path)
        # Don't load other configs via builder if passing paths manually
        .to_moveit_configs() # Call this to finalize robot_description
    )

    # --- Prepare parameters for move_group node ---
    # Start with the robot description generated by the builder
    move_group_params = [
        moveit_configs.robot_description, # Contains URDF
        # Explicitly add planning plugin, adapters, and pipeline config as a dictionary
        {
            "planning_plugin": "ompl_interface/OMPLPlanner",
            "request_adapters": "default_planning_request_adapters/ResolveConstraintFrames default_planning_request_adapters/ValidateWorkspaceBounds default_planning_request_adapters/CheckStartStateBounds default_planning_request_adapters/CheckStartStateCollision default_planning_request_adapters/FixWorkspaceBounds default_planning_request_adapters/FixStartStateBounds default_planning_request_adapters/FixStartStateCollision default_planning_request_adapters/FixStartStatePathConstraints",
            # Explicitly define the OMPL pipeline and link its config file
            "planning_pipelines": {
                "pipeline_names": ["ompl"], # Only load OMPL
                "ompl": {
                    "planning_plugin": "ompl_interface/OMPLPlanner" # Redundant? Maybe needed here too.
                    # The actual planner configs will come from ompl_planning_path below
                }
            }
        },
        # Pass paths to other relevant config files for the node to load
        srdf_path,
        kinematics_path,
        ompl_planning_path, # Contains only the ompl: block now
        joint_limits_path,
        moveit_controllers_path # For trajectory execution / controller names
    ]
    
    # Create the launch description
    return LaunchDescription([
        DeclareLaunchArgument(
            'use_sim_time',
            default_value='false',
            description='Use simulation (Gazebo) clock if true'
        ),
        Node( # controller_manager
            package="controller_manager",
            executable="ros2_control_node",
            # Pass robot description and general controller config
            parameters=[moveit_configs.robot_description, controllers_file],
            output="screen"
        ),
        Node( # Spawner for joint_state_broadcaster
            package="controller_manager",
            executable="spawner",
            arguments=["joint_state_broadcaster"],
            output="screen",
        ),
        Node( # Spawner for arm_trajectory_controller
            package="controller_manager",
            executable="spawner",
            arguments=["arm_trajectory_controller"],
            output="screen",
        ),
        Node( # robot_state_publisher
            package='robot_state_publisher',
            executable='robot_state_publisher',
            name='robot_state_publisher',
            output='screen',
            parameters=[{
                'use_sim_time': LaunchConfiguration('use_sim_time', default='false'),
                # Pass robot description from builder
                'robot_description': moveit_configs.robot_description["robot_description"]
            }]
        ),
        Node( # servo42c_controller node
            package='servo42c_controller',
            executable='servo42c_controller',
            name='servo42c_controller',
            output='screen',
            parameters=[config_file]
        ),
        Node( # move_group node
            package="moveit_ros_move_group",
            executable="move_group",
            output="screen",
            parameters=move_group_params, # Pass the list of parameter sources
        )
    ])
